library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity ComplexMultiply is
  port (
	clock : in std_logic;
	reset : in std_logic;
	data_in_A_re : in std_logic_vector(15 downto 0);
	data_in_A_im : in std_logic_vector(15 downto 0);
	data_in_B_re : in std_logic_vector(15 downto 0);
	data_in_B_im : in std_logic_vector(15 downto 0);
	data_out_re : out std_logic_vector(15 downto 0);
	data_out_im : out std_logic_vector(15 downto 0)
  ) ;
end entity ; -- ComplexMultiply

architecture arch of ComplexMultiply is

signal temp_mul1, temp_mul2, temp_mul3, temp_mul4 : signed(16 downto 0);

begin

main : process(clock)
begin
	if rising_edge(clock) then
		temp_mul1 <= signed(data_in_A_re) * signed(data_in_B_re);
		temp_mul2 <= signed(data_in_A_re) * signed(data_in_B_im);
		temp_mul3 <= signed(data_in_A_im) * signed(data_in_B_re);
		temp_mul4 <= signed(data_in_A_im) * signed(data_in_B_im);
	end if;

end process ; -- main

end architecture ; -- arch